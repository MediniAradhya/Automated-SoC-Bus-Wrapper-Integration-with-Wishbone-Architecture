/*------------------------------------------------------------------------------
 * This code was generated by Spiral IIR Filter Generator, www.spiral.net
 * Copyright (c) 2006, Carnegie Mellon University
 * All rights reserved.
 * The code is distributed under a BSD style license
 * (see http://www.opensource.org/licenses/bsd-license.php)
 *------------------------------------------------------------------------------ */
/* ./iirGen.pl -A 256 0 378 0 179 0 32 0 2 0 0 0 -B 0 4 22 68 136 191 191 136 68 22 4 0 -moduleName IIR_filter -fractionalBits 8 -bitWidth 32 -inData inData -inReg -outReg -outData outData -clk clk -reset reset -reset_edge negedge -filterForm 1 -debug -outFile ../outputs/filter_1536036361.v */
/* Warning: zero-valued filter taps have been optimized away. */

module IIR_filter_firBlock_left_MultiplyBlock (
    X,
    Y1,
    Y2,
    Y3,
    Y4,
    Y5,
    Y6,
    Y7,
    Y8,
    Y9,
    Y10,
    Y11
);

  // Port mode declarations:
  input signed   [31:0] X;
  output signed  [31:0]
    Y1,
    Y2,
    Y3,
    Y4,
    Y5,
    Y6,
    Y7,
    Y8,
    Y9,
    Y10,
    Y11;

  wire [31:0] Y [0:10];

  assign Y1 = Y[0];
  assign Y2 = Y[1];
  assign Y3 = Y[2];
  assign Y4 = Y[3];
  assign Y5 = Y[4];
  assign Y6 = Y[5];
  assign Y7 = Y[6];
  assign Y8 = Y[7];
  assign Y9 = Y[8];
  assign Y10 = Y[9];
  assign Y11 = Y[10];

  //Multipliers:

  wire signed [39:0]
    w1,
    w0,
    w16,
    w17,
    w4,
    w3,
    w8,
    w11,
    w192,
    w191,
    w22,
    w68,
    w136;

  assign w1 = X;
  assign w0 = 0;
  assign w11 = w3 + w8; //2195.42405790882 = adderArea(3,34)
  assign w136 = w17 << 3; //shl(3,39)
  assign w16 = w1 << 4; //shl(4,35)
  assign w17 = w1 + w16; //2195.42405790882 = adderArea(4,35)
  assign w191 = w192 - w1; //2561.32791574853 = subArea(6,39)
  assign w192 = w3 << 6; //shl(6,39)
  assign w22 = w11 << 1; //shl(1,36)
  assign w3 = w4 - w1; //2408.3135227603 = subArea(2,33)
  assign w4 = w1 << 2; //shl(2,33)
  assign w68 = w17 << 2; //shl(2,38)
  assign w8 = w1 << 3; //shl(3,34)

  assign Y[0] = w4[39:8]; //BitwidthUsed(0, 25)
  assign Y[1] = w22[39:8]; //BitwidthUsed(0, 28)
  assign Y[2] = w68[39:8]; //BitwidthUsed(0, 30)
  assign Y[3] = w136[39:8]; //BitwidthUsed(0, 31)
  assign Y[4] = w191[39:8]; //BitwidthUsed(0, 31)
  assign Y[5] = w191[39:8]; //BitwidthUsed(0, 31)
  assign Y[6] = w136[39:8]; //BitwidthUsed(0, 31)
  assign Y[7] = w68[39:8]; //BitwidthUsed(0, 30)
  assign Y[8] = w22[39:8]; //BitwidthUsed(0, 28)
  assign Y[9] = w4[39:8]; //BitwidthUsed(0, 25)
  assign Y[10] = w0[39:8]; //BitwidthUsed(none)

  //IIR_filter_firBlock_left_MultiplyBlock area estimate = 9360.48955432647;
endmodule //IIR_filter_firBlock_left_MultiplyBlock




module IIR_filter_firBlock_left (
    X,
    clk,
    Y,
    reset
);

  // Port mode declarations:
  input   [31:0] X;
  input    clk;
  output  [31:0] Y;
  input    reset;

  //registerOut
  reg [31:0] Y;
  wire [31:0] Y_in;

  always@(posedge clk or negedge reset) begin
    if(~reset) begin
      Y <= 32'h00000000;
    end  else begin
      Y <= Y_in;
    end
  end

  wire [31:0] multProducts [0:10];

  IIR_filter_firBlock_left_MultiplyBlock my_IIR_filter_firBlock_left_MultiplyBlock(
    .X(X),
    .Y1(multProducts[0]),
    .Y2(multProducts[1]),
    .Y3(multProducts[2]),
    .Y4(multProducts[3]),
    .Y5(multProducts[4]),
    .Y6(multProducts[5]),
    .Y7(multProducts[6]),
    .Y8(multProducts[7]),
    .Y9(multProducts[8]),
    .Y10(multProducts[9]),
    .Y11(multProducts[10])
  );

  reg [31:0] firStep[0:9];

  always@(posedge clk or negedge reset) begin
    if(~reset) begin
      firStep[0] <= 32'h00000000;
      firStep[1] <= 32'h00000000;
      firStep[2] <= 32'h00000000;
      firStep[3] <= 32'h00000000;
      firStep[4] <= 32'h00000000;
      firStep[5] <= 32'h00000000;
      firStep[6] <= 32'h00000000;
      firStep[7] <= 32'h00000000;
      firStep[8] <= 32'h00000000;
      firStep[9] <= 32'h00000000;
    end
    else begin
      firStep[0] <=  multProducts[0]; // 2448.23046908235 = flop(0, 31)
      firStep[1] <=  firStep[0] + multProducts[1]; // 4643.65452699117 = flop(0, 31) + adder(0, 31)
      firStep[2] <=  firStep[1] + multProducts[2]; // 4643.65452699117 = flop(0, 31) + adder(0, 31)
      firStep[3] <=  firStep[2] + multProducts[3]; // 4643.65452699117 = flop(0, 31) + adder(0, 31)
      firStep[4] <=  firStep[3] + multProducts[4]; // 4643.65452699117 = flop(0, 31) + adder(0, 31)
      firStep[5] <=  firStep[4] + multProducts[5]; // 4643.65452699117 = flop(0, 31) + adder(0, 31)
      firStep[6] <=  firStep[5] + multProducts[6]; // 4643.65452699117 = flop(0, 31) + adder(0, 31)
      firStep[7] <=  firStep[6] + multProducts[7]; // 4643.65452699117 = flop(0, 31) + adder(0, 31)
      firStep[8] <=  firStep[7] + multProducts[8]; // 4643.65452699117 = flop(0, 31) + adder(0, 31)
      firStep[9] <=  firStep[8] + multProducts[9]; // 4643.65452699117 = flop(0, 31) + adder(0, 31)
    end
  end

  assign Y_in = firStep[9]+ multProducts[10];// 0 = adder(none)
  //IIR_filter_firBlock_left area estimate = 56049.8412354117;
endmodule //IIR_filter_firBlock_left



/* Warning: zero-valued filter taps have been optimized away. */

module IIR_filter_firBlock_right_MultiplyBlock (
    X,
    Y1,
    Y2,
    Y3,
    Y4,
    Y5,
    Y6,
    Y7,
    Y8
);

  // Port mode declarations:
  input signed   [31:0] X;
  output signed  [31:0]
    Y1,
    Y2,
    Y3,
    Y4,
    Y5,
    Y6,
    Y7,
    Y8;

  wire [31:0] Y [0:7];

  assign Y1 = Y[0];
  assign Y2 = Y[1];
  assign Y3 = Y[2];
  assign Y4 = Y[3];
  assign Y5 = Y[4];
  assign Y6 = Y[5];
  assign Y7 = Y[6];
  assign Y8 = Y[7];

  //Multipliers:

  wire signed [39:0]
    w1,
    w0,
    w4,
    w3,
    w192,
    w189,
    w5,
    w10,
    w179,
    w2,
    w2_,
    w32,
    w32_,
    w179_,
    w378,
    w378_;

  assign w1 = X;
  assign w0 = 0;
  assign w10 = w5 << 1; //shl(1,35)
  assign w179 = w189 - w10; //2943.86389821912 = subArea(1,39)
  assign w179_ = -1 * w179; //1809.56165059559 = negArea(0,39)
  assign w189 = w192 - w3; //2484.82071925441 = subArea(6,38)
  assign w192 = w3 << 6; //shl(6,38)
  assign w2 = w1 << 1; //shl(1,32)
  assign w2_ = -1 * w2; //1437.00483871323 = negArea(1,32)
  assign w3 = w4 - w1; //2331.80632626618 = subArea(2,32)
  assign w32 = w1 << 5; //shl(5,36)
  assign w32_ = -1 * w32; //1437.00483871323 = negArea(5,36)
  assign w378 = w189 << 1; //shl(1,39)
  assign w378_ = -1 * w378; //1762.99204911029 = negArea(1,39)
  assign w4 = w1 << 2; //shl(2,32)
  assign w5 = w1 + w4; //2195.42405790882 = adderArea(2,33)

  assign Y[0] = w2_[39:8]; //BitwidthUsed(0, 24)
  assign Y[1] = w0[39:8]; //BitwidthUsed(none)
  assign Y[2] = w32_[39:8]; //BitwidthUsed(0, 28)
  assign Y[3] = w0[39:8]; //BitwidthUsed(none)
  assign Y[4] = w179_[39:8]; //BitwidthUsed(0, 31)
  assign Y[5] = w0[39:8]; //BitwidthUsed(none)
  assign Y[6] = w378_[39:8]; //BitwidthUsed(0, 31)
  assign Y[7] = w0[39:8]; //BitwidthUsed(none)

  //IIR_filter_firBlock_right_MultiplyBlock area estimate = 16402.4783787809;
endmodule //IIR_filter_firBlock_right_MultiplyBlock




module IIR_filter_firBlock_right (
    X,
    clk,
    Y,
    reset
);

  // Port mode declarations:
  input   [31:0] X;
  input    clk;
  output  [31:0] Y;
  input    reset;

  //registerOut
  reg [31:0] Y;
  wire [31:0] Y_in;

  always@(posedge clk or negedge reset) begin
    if(~reset) begin
      Y <= 32'h00000000;
    end  else begin
      Y <= Y_in;
    end
  end

  wire [31:0] multProducts [0:7];

  IIR_filter_firBlock_right_MultiplyBlock my_IIR_filter_firBlock_right_MultiplyBlock(
    .X(X),
    .Y1(multProducts[0]),
    .Y2(multProducts[1]),
    .Y3(multProducts[2]),
    .Y4(multProducts[3]),
    .Y5(multProducts[4]),
    .Y6(multProducts[5]),
    .Y7(multProducts[6]),
    .Y8(multProducts[7])
  );

  reg [31:0] firStep[0:6];

  always@(posedge clk or negedge reset) begin
    if(~reset) begin
      firStep[0] <= 32'h00000000;
      firStep[1] <= 32'h00000000;
      firStep[2] <= 32'h00000000;
      firStep[3] <= 32'h00000000;
      firStep[4] <= 32'h00000000;
      firStep[5] <= 32'h00000000;
      firStep[6] <= 32'h00000000;
    end
    else begin
      firStep[0] <=  multProducts[0]; // 2448.23046908235 = flop(0, 31)
      firStep[1] <=  firStep[0] + multProducts[1]; // 2448.23046908235 = flop(0, 31) + adder(none)
      firStep[2] <=  firStep[1] + multProducts[2]; // 4643.65452699117 = flop(0, 31) + adder(0, 31)
      firStep[3] <=  firStep[2] + multProducts[3]; // 2448.23046908235 = flop(0, 31) + adder(none)
      firStep[4] <=  firStep[3] + multProducts[4]; // 4643.65452699117 = flop(0, 31) + adder(0, 31)
      firStep[5] <=  firStep[4] + multProducts[5]; // 2448.23046908235 = flop(0, 31) + adder(none)
      firStep[6] <=  firStep[5] + multProducts[6]; // 4643.65452699117 = flop(0, 31) + adder(0, 31)
    end
  end

  assign Y_in = firStep[6]+ multProducts[7];// 0 = adder(none)
  //IIR_filter_firBlock_right area estimate = 42574.5943051662;
endmodule //IIR_filter_firBlock_right




module IIR_filter (
    inData,
    clk,
    outData,
    reset
);

  // Port mode declarations:
  input   [31:0] inData;
  input    clk;
  output  [31:0] outData;
  input    reset;

  //registerIn
  reg [31:0] inData_in;

  always@(posedge clk or negedge reset) begin
    if(~reset) begin
      inData_in <= 32'h00000000;
    end  else begin
      inData_in <= inData;
    end
  end

  //registerOut
  reg [31:0] outData;
  wire [31:0] outData_in;

  always@(posedge clk or negedge reset) begin
    if(~reset) begin
      outData <= 32'h00000000;
    end  else begin
      outData <= outData_in;
    end
  end

  wire [31:0] leftOut, rightOut;

  IIR_filter_firBlock_left my_IIR_filter_firBlock_left(
    .X(inData_in),
    .Y(leftOut),
    .clk(clk),
    .reset(reset)
);

  IIR_filter_firBlock_right my_IIR_filter_firBlock_right(
    .X(outData_in),
    .Y(rightOut),
    .clk(clk),
    .reset(reset)
);

  assign outData_in = leftOut + rightOut; // adder(32)

  //IIR_filter area estimate = 105716.320536651;
endmodule //IIR_filter
